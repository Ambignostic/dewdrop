#!/usr/bin/env php
<?php

// Ensure the installer's dependencies are present
checkCli();
checkWordPress();

$git = checkGit();

$pluginInfo = getPluginInfo();

checkFolderAlreadyExists($pluginInfo['folder']);

$pluginPath = getcwd() . '/wp-content/plugins/' . $pluginInfo['folder'];

if (!mkdir($pluginPath)) {
    abortInstall('Could not create plugin folder.  Please check permissions and try again.');
}

// Create default plugin subfolders
$subfolders = array(
    'admin',
    'db',
    'models',
    'short-codes',
    'tests'
);

foreach ($subfolders as $subfolder) {
    mkdir("{$pluginPath}/{$subfolder}");
}

// Clone Dewdrop repo into lib subfolder
$cmd = sprintf(
    '%s clone https://github.com/DeltaSystems/dewdrop.git %s 2>&1',
    $git,
    escapeshellarg($pluginPath . '/lib')
);

exec($cmd, $output, $exitStatus);

if ($exitStatus) {
    abortInstall(
        'Failed to clone git repo:' . PHP_EOL
        . $cmd
        . PHP_EOL . PHP_EOL
        . implode(PHP_EOL . '    ', $output)
    );
}

// Create main plugin file
$template = <<<PLUGIN
<?php

/**
 * Plugin Name: {$pluginInfo['name']}
 * Description: A new WordPress plugin based on Dewdrop.
 * Version: 0.1
 */

require_once __DIR__ . '/lib/Dewdrop/Wiring.php';

\$wiring = new \Dewdrop\Wiring();
PLUGIN;

file_put_contents(
    "{$pluginPath}/{$pluginInfo['folder']}.php",
    $template . PHP_EOL
);

// Create dewdrop CLI tool
$template = <<<CLI
#!/usr/bin/env php
<?php

if ('cli' !== php_sapi_name()) {
    exit;
}

require_once __DIR__ . '/wp-content/plugins/{$pluginInfo['folder']}/lib/Dewdrop/Cli/Run.php';
\$cli = new \Dewdrop\Cli\Run();

\$cli->run();
CLI;

file_put_contents(
    getcwd() . '/dewdrop',
    $template
);

$cmd = sprintf(
    'chmod +x %s',
    escapeshellarg(getcwd() . '/dewdrop')
);

shell_exec($cmd);

function getPluginInfo()
{
    $stdin = @fopen('php://stdin', 'r');

    if (!$stdin) {
        abortInstall('Could not read STDIN.');
    }

    echo 'What do you want to name your plugin?:' . PHP_EOL;
    echo '(type your plugin\'s name and press enter)' . PHP_EOL;
    $name   = trim(fgets($stdin));
    $folder = inflectPluginFolderFromName($name);

    fclose($stdin);

    if (!$name || !$folder) {
        return getPluginInfo();
    }

    return array(
        'name'   => $name,
        'folder' => $folder
    );
}

function inflectPluginFolderFromName($name)
{
    $folder = strtolower($name);

    $folder = str_replace(' ', '-', $folder);

    $folder = preg_replace(
        '/[^a-z0-9\-]/i',
        '',
        $folder
    );

    return $folder;
}

function checkCli()
{
    if ('cli' !== php_sapi_name()) {
        abortInstall('The installer must be run on the command-line.');
    }
}

function checkGit()
{
    $gitBin = shell_exec('which git');

    if (!$gitBin) {
        abortInstall('Please install git and ensure it is in your shell\'s $PATH');
    }

    return trim($gitBin);
}

function checkWordPress()
{
    if (!file_exists(getcwd() . '/wp-config.php')) {
        abortInstall('This installer must be run in the root directory of your WordPress install.');
    }
}

function checkFolderAlreadyExists($folder)
{
    $cwd    = getcwd();
    $plugin = "$cwd/wp-content/plugins/$folder";

    if (file_exists($plugin)) {
        abortInstall("\"{$plugin}\" folder already exists.  Cannot install.");
    }
}

/**
 * Print provided error message and exit.
 */
function abortInstall($message)
{
    echo PHP_EOL;
    echo 'ABORTING INSTALLATION' . PHP_EOL;
    echo '=====================' . PHP_EOL;
    echo PHP_EOL;

    echo 'ERROR: ' . $message . PHP_EOL;

    echo PHP_EOL;

    echo 'For help, go to <https://github.com/DeltaSystems/dewdrop> ';
    echo 'and create a new issue.' . PHP_EOL;

    exit;
}
